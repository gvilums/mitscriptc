function
{
	functions =
	[
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 0,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions =
			[
				function
				{
					functions = [],
					constants = ["Index ", " out of bounds ", None],
					parameter_count = 2,
					local_vars = [idx, val],
					local_ref_vars = [],
					free_vars = [size, this],
					names = [print],
					instructions = 
					[
						load_local	0
						push_ref	0
						load_ref
						swap
						gt
						not
						if	7
						push_ref	1
						load_ref
						load_local	0
						load_local	1
						index_store
						goto	9
						load_global	0
						load_const	0
						load_local	0
						add
						load_const	1
						add
						call	1
						pop
						load_const	2
						return
					]
				},
				function
				{
					functions = [],
					constants = ["Index ", " out of bounds ", None],
					parameter_count = 1,
					local_vars = [idx],
					local_ref_vars = [],
					free_vars = [size, this],
					names = [print],
					instructions = 
					[
						load_local	0
						push_ref	0
						load_ref
						swap
						gt
						not
						if	7
						push_ref	1
						load_ref
						load_local	0
						index_load
						return
						goto	9
						load_global	0
						load_const	0
						load_local	0
						add
						load_const	1
						add
						call	1
						pop
						load_const	2
						return
					]
				},
				function
				{
					functions = [],
					constants = [],
					parameter_count = 0,
					local_vars = [],
					local_ref_vars = [],
					free_vars = [size],
					names = [],
					instructions = 
					[
						push_ref	0
						load_ref
						return
					]
				},
				function
				{
					functions = [],
					constants = [None, 0, "", " ", 1, "[", "]"],
					parameter_count = 0,
					local_vars = [i, out],
					local_ref_vars = [],
					free_vars = [size, this],
					names = [get, print],
					instructions = 
					[
						load_const	0
						store_local	0
						load_const	0
						store_local	1
						load_const	1
						store_local	0
						load_const	2
						store_local	1
						load_local	0
						push_ref	0
						load_ref
						swap
						gt
						not
						if	16
						load_local	1
						push_ref	1
						load_ref
						field_load	0
						load_local	0
						call	1
						add
						load_const	3
						add
						store_local	1
						load_local	0
						load_const	4
						add
						store_local	0
						goto	-21
						load_global	1
						load_const	5
						load_local	1
						add
						load_const	6
						add
						call	1
						pop
						load_const	0
						return
					]
				}
			],
			constants = [None],
			parameter_count = 1,
			local_vars = [size, this],
			local_ref_vars = [size, this],
			free_vars = [],
			names = [put, get, getSize, print],
			instructions = 
			[
				load_const	0
				store_local	1
				alloc_record
				dup
				dup
				dup
				dup
				load_func	0
				push_ref	0
				push_ref	1
				alloc_closure	2
				field_store	0
				load_func	1
				push_ref	0
				push_ref	1
				alloc_closure	2
				field_store	1
				load_func	2
				push_ref	0
				alloc_closure	1
				field_store	2
				load_func	3
				push_ref	0
				push_ref	1
				alloc_closure	2
				field_store	3
				store_local	1
				load_local	1
				return
			]
		},
		function
		{
			functions = [],
			constants = [None, 0, "hi", 1],
			parameter_count = 1,
			local_vars = [arr, i],
			local_ref_vars = [],
			free_vars = [],
			names = [getSize, put],
			instructions = 
			[
				load_const	0
				store_local	1
				load_const	1
				store_local	1
				load_local	1
				load_local	0
				field_load	0
				call	0
				swap
				gt
				not
				if	12
				load_local	0
				field_load	1
				load_local	1
				load_const	2
				call	2
				pop
				load_local	1
				load_const	3
				add
				store_local	1
				goto	-18
				load_const	0
				return
			]
		}
	],
	constants = [50000, "Garbage collector bench3.mit", " Creating a long-lived array of "],
	parameter_count = 0,
	local_vars = [],
	local_ref_vars = [],
	free_vars = [],
	names = [kArraySize, Array, fillArray, arr, print, input, intcast],
	instructions = 
	[
		load_func	0
		alloc_closure	0
		store_global	4
		load_func	1
		alloc_closure	0
		store_global	5
		load_func	2
		alloc_closure	0
		store_global	6
		load_const	0
		store_global	0
		load_func	3
		alloc_closure	0
		store_global	1
		load_func	4
		alloc_closure	0
		store_global	2
		load_global	4
		load_const	1
		call	1
		pop
		load_global	4
		load_const	2
		load_global	0
		add
		call	1
		pop
		load_global	1
		load_global	0
		call	1
		store_global	3
		load_global	2
		load_global	3
		call	1
		pop
	]
}