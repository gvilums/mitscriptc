function
{
	functions =
	[
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 0,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions =
			[
				function
				{
					functions = [],
					constants = [None, 0],
					parameter_count = 0,
					local_vars = [],
					local_ref_vars = [],
					free_vars = [this],
					names = [head, len],
					instructions = 
					[
						push_ref	0
						load_ref
						field_load	0
						load_const	0
						eq
						not
						if	4
						load_const	1
						return
						goto	6
						push_ref	0
						load_ref
						field_load	0
						field_load	1
						return
						load_const	0
						return
					]
				},
				function
				{
					functions = [],
					constants = [1, None],
					parameter_count = 1,
					local_vars = [v],
					local_ref_vars = [],
					free_vars = [this],
					names = [head, len, car, cdr],
					instructions = 
					[
						push_ref	0
						load_ref
						alloc_record
						dup
						dup
						dup
						push_ref	0
						load_ref
						field_load	1
						call	0
						load_const	0
						add
						field_store	1
						load_local	0
						field_store	2
						push_ref	0
						load_ref
						field_load	0
						field_store	3
						field_store	0
						load_const	1
						return
					]
				},
				function
				{
					functions = [],
					constants = [None],
					parameter_count = 0,
					local_vars = [t],
					local_ref_vars = [],
					free_vars = [this],
					names = [head, print, car, cdr],
					instructions = 
					[
						load_const	0
						store_local	0
						push_ref	0
						load_ref
						field_load	0
						store_local	0
						load_local	0
						load_const	0
						eq
						not
						not
						if	10
						load_global	1
						load_local	0
						field_load	2
						call	1
						pop
						load_local	0
						field_load	3
						store_local	0
						goto	-14
						load_const	0
						return
					]
				},
				function
				{
					functions = [],
					constants = [None],
					parameter_count = 1,
					local_vars = [f, t],
					local_ref_vars = [],
					free_vars = [this],
					names = [head, car, cdr],
					instructions = 
					[
						load_const	0
						store_local	1
						push_ref	0
						load_ref
						field_load	0
						store_local	1
						load_local	1
						load_const	0
						eq
						not
						not
						if	10
						load_local	0
						load_local	1
						field_load	1
						call	1
						pop
						load_local	1
						field_load	2
						store_local	1
						goto	-14
						load_const	0
						return
					]
				}
			],
			constants = [None],
			parameter_count = 0,
			local_vars = [this],
			local_ref_vars = [this],
			free_vars = [],
			names = [head, len, plus, print, forall],
			instructions = 
			[
				load_const	0
				store_local	0
				alloc_record
				dup
				dup
				dup
				dup
				dup
				load_const	0
				field_store	0
				load_func	0
				push_ref	0
				alloc_closure	1
				field_store	1
				load_func	1
				push_ref	0
				alloc_closure	1
				field_store	2
				load_func	2
				push_ref	0
				alloc_closure	1
				field_store	3
				load_func	3
				push_ref	0
				alloc_closure	1
				field_store	4
				store_local	0
				load_local	0
				return
			]
		},
		function
		{
			functions = [],
			constants = ["SKIP: ", " ", 1, None],
			parameter_count = 1,
			local_vars = [s],
			local_ref_vars = [],
			free_vars = [],
			names = [b, i, other, plus],
			instructions = 
			[
				load_global	0
				not
				if	12
				load_global	2
				field_load	3
				load_const	0
				load_global	1
				add
				load_const	1
				add
				load_local	0
				add
				call	1
				pop
				load_global	0
				not
				store_global	0
				load_global	1
				load_const	2
				add
				store_global	1
				load_const	3
				return
			]
		},
		function
		{
			functions =
			[
				function
				{
					functions = [],
					constants = [" ", 1, None],
					parameter_count = 1,
					local_vars = [s],
					local_ref_vars = [],
					free_vars = [rv, state],
					names = [plus, n],
					instructions = 
					[
						push_ref	0
						load_ref
						field_load	0
						push_ref	1
						load_ref
						field_load	1
						load_const	0
						add
						load_local	0
						add
						call	1
						pop
						push_ref	1
						load_ref
						push_ref	1
						load_ref
						field_load	1
						load_const	1
						add
						field_store	1
						load_const	2
						return
					]
				},
				function
				{
					functions = [],
					constants = [" ", 1, None],
					parameter_count = 1,
					local_vars = [s],
					local_ref_vars = [],
					free_vars = [rv, state],
					names = [plus, n],
					instructions = 
					[
						push_ref	0
						load_ref
						field_load	0
						push_ref	1
						load_ref
						field_load	1
						load_const	0
						add
						load_local	0
						add
						call	1
						pop
						push_ref	1
						load_ref
						push_ref	1
						load_ref
						field_load	1
						load_const	1
						add
						field_store	1
						load_const	2
						return
					]
				}
			],
			constants = [None, 0],
			parameter_count = 1,
			local_vars = [lst, state, rv],
			local_ref_vars = [rv, state],
			free_vars = [],
			names = [n, List, forall],
			instructions = 
			[
				load_const	0
				store_local	1
				load_const	0
				store_local	2
				alloc_record
				dup
				load_const	1
				field_store	0
				store_local	1
				load_global	1
				call	0
				store_local	2
				load_local	0
				field_load	2
				load_func	0
				push_ref	0
				push_ref	1
				alloc_closure	2
				call	1
				pop
				load_local	0
				field_load	2
				load_func	1
				push_ref	0
				push_ref	1
				alloc_closure	2
				call	1
				pop
				load_local	2
				return
			]
		},
		function
		{
			functions =
			[
				function
				{
					functions =
					[
						function
						{
							functions = [],
							constants = [1, None],
							parameter_count = 1,
							local_vars = [t],
							local_ref_vars = [],
							free_vars = [s, state],
							names = [n],
							instructions = 
							[
								push_ref	0
								load_ref
								load_local	0
								eq
								not
								if	9
								push_ref	1
								load_ref
								push_ref	1
								load_ref
								field_load	0
								load_const	0
								add
								field_store	0
								load_const	1
								return
							]
						}
					],
					constants = [None],
					parameter_count = 1,
					local_vars = [s],
					local_ref_vars = [s],
					free_vars = [l2, state],
					names = [forall],
					instructions = 
					[
						push_ref	1
						load_ref
						field_load	0
						load_func	0
						push_ref	0
						push_ref	2
						alloc_closure	2
						call	1
						pop
						load_const	0
						return
					]
				}
			],
			constants = [None, 0],
			parameter_count = 2,
			local_vars = [l1, l2, state],
			local_ref_vars = [l2, state],
			free_vars = [],
			names = [n, forall],
			instructions = 
			[
				load_const	0
				store_local	2
				alloc_record
				dup
				load_const	1
				field_store	0
				store_local	2
				load_local	0
				field_load	1
				load_func	0
				push_ref	0
				push_ref	1
				alloc_closure	2
				call	1
				pop
				load_local	2
				field_load	0
				return
			]
		}
	],
	constants = [0, 1, true, "l.len() = ", "big.len = ", "Duplicates l other: ", "Duplicates l l: ", "Duplicates other other: ", "Duplicates big big: "],
	parameter_count = 0,
	local_vars = [],
	local_ref_vars = [],
	free_vars = [],
	names = [List, N, l, i, b, other, duplicate, big, countDuplicates, intcast, input, plus, forall, print, len],
	instructions = 
	[
		load_func	0
		alloc_closure	0
		store_global	13
		load_func	1
		alloc_closure	0
		store_global	10
		load_func	2
		alloc_closure	0
		store_global	9
		load_func	3
		alloc_closure	0
		store_global	0
		load_global	9
		load_global	10
		call	0
		call	1
		store_global	1
		load_global	0
		call	0
		store_global	2
		load_const	0
		store_global	3
		load_global	3
		load_global	1
		swap
		gt
		not
		if	12
		load_global	2
		field_load	11
		load_global	10
		call	0
		call	1
		pop
		load_global	3
		load_const	1
		add
		store_global	3
		goto	-16
		load_const	2
		store_global	4
		load_global	0
		call	0
		store_global	5
		load_const	0
		store_global	3
		load_global	2
		field_load	12
		load_func	4
		alloc_closure	0
		call	1
		pop
		load_global	13
		load_const	3
		load_global	2
		field_load	14
		call	0
		add
		call	1
		pop
		load_func	5
		alloc_closure	0
		store_global	6
		load_global	6
		load_global	6
		load_global	6
		load_global	6
		load_global	6
		load_global	2
		call	1
		call	1
		call	1
		call	1
		call	1
		store_global	7
		load_global	13
		load_const	4
		load_global	7
		field_load	14
		call	0
		add
		call	1
		pop
		load_func	6
		alloc_closure	0
		store_global	8
		load_global	13
		load_const	5
		load_global	8
		load_global	2
		load_global	5
		call	2
		add
		call	1
		pop
		load_global	13
		load_const	6
		load_global	8
		load_global	2
		load_global	2
		call	2
		add
		call	1
		pop
		load_global	13
		load_const	7
		load_global	8
		load_global	5
		load_global	5
		call	2
		add
		call	1
		pop
		load_global	13
		load_const	8
		load_global	8
		load_global	7
		load_global	7
		call	2
		add
		call	1
		pop
	]
}