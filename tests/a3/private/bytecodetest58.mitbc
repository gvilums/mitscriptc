function
{
	functions =
	[
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 0,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions = [],
			constants = [],
			parameter_count = 1,
			local_vars = [],
			local_ref_vars = [],
			free_vars = [],
			names = [],
			instructions = 
			[
			]
		},
		function
		{
			functions =
			[
				function
				{
					functions = [],
					constants = [None],
					parameter_count = 1,
					local_vars = [leftNode],
					local_ref_vars = [],
					free_vars = [this],
					names = [left],
					instructions = 
					[
						push_ref	0
						load_ref
						load_local	0
						field_store	0
						load_const	0
						return
					]
				},
				function
				{
					functions = [],
					constants = [None],
					parameter_count = 1,
					local_vars = [rightNode],
					local_ref_vars = [],
					free_vars = [this],
					names = [right],
					instructions = 
					[
						push_ref	0
						load_ref
						load_local	0
						field_store	0
						load_const	0
						return
					]
				},
				function
				{
					functions = [],
					constants = [],
					parameter_count = 0,
					local_vars = [],
					local_ref_vars = [],
					free_vars = [this],
					names = [left],
					instructions = 
					[
						push_ref	0
						load_ref
						field_load	0
						return
					]
				},
				function
				{
					functions = [],
					constants = [],
					parameter_count = 0,
					local_vars = [],
					local_ref_vars = [],
					free_vars = [this],
					names = [right],
					instructions = 
					[
						push_ref	0
						load_ref
						field_load	0
						return
					]
				}
			],
			constants = [None],
			parameter_count = 0,
			local_vars = [this],
			local_ref_vars = [this],
			free_vars = [],
			names = [left, right, setLeft, setRight, getLeft, getRight],
			instructions = 
			[
				load_const	0
				store_local	0
				alloc_record
				dup
				dup
				dup
				dup
				dup
				dup
				load_const	0
				field_store	0
				load_const	0
				field_store	1
				load_func	0
				push_ref	0
				alloc_closure	1
				field_store	2
				load_func	1
				push_ref	0
				alloc_closure	1
				field_store	3
				load_func	2
				push_ref	0
				alloc_closure	1
				field_store	4
				load_func	3
				push_ref	0
				alloc_closure	1
				field_store	5
				store_local	0
				load_local	0
				return
			]
		},
		function
		{
			functions = [],
			constants = [None, 0, 1],
			parameter_count = 2,
			local_vars = [depth, node, newLeft, newRight],
			local_ref_vars = [],
			free_vars = [],
			names = [Node, setLeft, setRight, populate, getLeft, getRight],
			instructions = 
			[
				load_const	0
				store_local	2
				load_const	0
				store_local	3
				load_local	0
				load_const	1
				swap
				geq
				not
				if	4
				load_const	0
				return
				goto	35
				load_local	0
				load_const	2
				sub
				store_local	0
				load_global	0
				call	0
				store_local	2
				load_global	0
				call	0
				store_local	3
				load_local	1
				field_load	1
				load_local	2
				call	1
				pop
				load_local	1
				field_load	2
				load_local	3
				call	1
				pop
				load_global	3
				load_local	0
				load_local	1
				field_load	4
				call	0
				call	2
				pop
				load_global	3
				load_local	0
				load_local	1
				field_load	5
				call	0
				call	2
				pop
				load_const	0
				return
			]
		}
	],
	constants = [16, "Garbage collector bench1.mit", "Creating a long-lived binary tree of depth "],
	parameter_count = 0,
	local_vars = [],
	local_ref_vars = [],
	free_vars = [],
	names = [kLongLivedTreeDepth, Node, populate, root, print, input, intcast],
	instructions = 
	[
		load_func	0
		alloc_closure	0
		store_global	4
		load_func	1
		alloc_closure	0
		store_global	5
		load_func	2
		alloc_closure	0
		store_global	6
		load_const	0
		store_global	0
		load_func	3
		alloc_closure	0
		store_global	1
		load_func	4
		alloc_closure	0
		store_global	2
		load_global	4
		load_const	1
		call	1
		pop
		load_global	4
		load_const	2
		load_global	0
		add
		call	1
		pop
		load_global	1
		call	0
		store_global	3
		load_global	2
		load_global	0
		load_global	3
		call	2
		pop
	]
}