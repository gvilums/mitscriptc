minHeap = fun(){
	this = {
		arr : {};
		idx : 0;
		ins : fun(val) {
			this.arr[this.idx] = val;
			this.idx = this.idx + 1;
			
			cur = this.idx - 1;
			while(!(cur == 0) & (this.arr[cur] < this.arr[(cur - 1)/2])) {
				temp = this.arr[cur];
				this.arr[cur] = this.arr[(cur - 1)/2];
				this.arr[(cur - 1)/2] = temp;
				cur = (cur - 1) / 2;
			}
		};
		min : fun(){
			if (this.idx > 0) {
				return this.arr[0];
			}
		};
		delmin : fun(){
			if (this.idx > 0) {
				this.arr[0] = this.arr[this.idx - 1];
				
				
				cur = 0;
				while (cur < this.idx) {
					
					nxt = cur;
					if ((cur * 2) + 1 < this.idx) {
						if (this.arr[nxt] > this.arr[(cur * 2) + 1]) {
							nxt = (cur * 2) + 1;
						}
					}
					if ((cur * 2) < this.idx) {
						if (this.arr[nxt] > this.arr[(cur * 2)]) {
							nxt = (cur * 2);
						}
					}
					
					if(!(nxt == cur)){
						temp = this.arr[cur];
						this.arr[cur] = this.arr[nxt];
						this.arr[nxt] = temp;	
						cur = nxt;		
					}
					else {
						return None;
					}
					
				}
			}
			
		};
	
	};
	return this;
};


h = minHeap();
i = 0;
while(i < 2000){
	h.ins(i + 5);
	i = i + 1;
}

print(h.min());
h.delmin();
print(h.min());
h.delmin();
print(h.min());
h.ins(3);
print(h.min());
h.delmin();
print(h.min());





